install.packages("devtools")
devtools::install_github("JaseZiv/worldfootballR")
library(devtools)
library(devtools)
install.packages("devtools")
EPL_2021 <- read.csv("EPL_2021.csv")
head(EPL_2021)
View(EPL_2021)
distinct(EPL_2021$result)
set(EPL_2021$result)
unique(EPL_2021$result)
colnames(EPL_2021)
library(dplyr)
install.packages("dplyr")
library(dplyr)
df_1 <- EPL_2021 %>% select(result, X, Y, xG, h_a, situation, shotType, home_goals, away_goals, lastAction) %>%
mutate(status = ifelse(result == "Goal", "1", "0")) %>%
mutate(distanceToGoal = sqrt((105 - (X * 105)) ^ 2 + (32.5 - (Y * 68)) ^ 2)) %>%
mutate(angleToGoal = abs(atan((7.32 * (105 - (X * 105))) / ((105 - (X * 105))^2 +
(32.5 - (Y * 68)) ^ 2 - (7.32 / 2) ^ 2)) * 180 / pi)) %>%
select(-X, -Y, -result)
View(df_1)
library(dplyr)
data <- EPL_2021 %>% select(result, X, Y, xG, h_a, situation, shotType, home_goals, away_goals, lastAction) %>%
mutate(status = ifelse(result == "Goal", "1", "0")) %>%
mutate(distanceToGoal = sqrt((105 - (X * 105)) ^ 2 + (32.5 - (Y * 68)) ^ 2)) %>%
mutate(angleToGoal = abs(atan((7.32 * (105 - (X * 105))) / ((105 - (X * 105))^2 +
(32.5 - (Y * 68)) ^ 2 - (7.32 / 2) ^ 2)) * 180 / pi)) %>%
select(-X, -Y, -result)
library(autoEDA)
install.packages("autoEDA")
library(autoEDA)
install.packages("autoEDA")
View(data)
library(DALEX)
install.packages("DALEX")
library(DALEX)
library(DALEXtra)
install.packages("DALEXtra")
install.packages("ranger")
library(DALEX)
library(DALEXtra)
library(ranger)
model <- ranger::ranger(status ~., data = data, classification = TRUE, probability = TRUE)
data_processed <- data  %>% mutate(h_a = as.factor(h_a),
situation = as.factor(situation),
shotType = as.factor(shotType),
lastAction = as.factor(lastAction),
status = as.numeric(status))
model <- ranger::ranger(status ~., data = data_processed, classification = TRUE, probability = TRUE)
obs37 <- data_processed[37, !(colnames(newdata) %in% c("status"))]
obs37 <- data_processed[37, !(colnames(data_processed) %in% c("status"))]
predict_37 <- predict(model, obs37)
# print(ifelse(predict_12$predictions[2]<=0.5,0,1))
# value_12 <- newdata[12, "status"]
# print(value_12)
View(predict_37)
obs37 <- data_processed[37, !(colnames(data_processed) %in% c("status"))]
predict_37 <- predict(model, obs37)
ifelse(predict_12$predictions[2] <= 0.5, 0, 1)
obs37 <- data_processed[37, !(colnames(data_processed) %in% c("status"))]
predict_37 <- predict(model, obs37)
ifelse(predict_37$predictions[2] <= 0.5, 0, 1)
data_processed[12, "status"]
predict_37$predictions[2]
obs40 <- data_processed[40, !(colnames(data_processed) %in% c("status"))]
predict_40 <- predict(model, obs40)
ifelse(predict_40$predictions[2] <= 0.5, 0, 1)
data_processed[12, "status"]
predict_40$predictions[2]
explainer <- explain(model, data = data_processed, y = as.numeric(data_processed$status))
plot(predict_parts(explainer = explainer, new_observation = obs40))
shap <- predict_parts(explainer = explainer, new_observation = obs40, type = 'shap', B = 4)
plot(shap)
heatmap(as.matrix(data_processed[, !(colnames(data_processed) %in% c("status"))]))
obs37 <- data_processed[37, !(colnames(data_processed) %in% c("status"))]
plot(predict_parts(explainer = explainer, new_observation = obs37))
obs120 <- data_processed[120, !(colnames(data_processed) %in% c("status"))]
plot(predict_parts(explainer = explainer, new_observation = obs120))
EPL_2021 <- read.csv("EPL_2021.csv")
head(EPL_2021)
library(dplyr)
data <- EPL_2021 %>% select(result, X, Y, xG, h_a, situation, shotType, home_goals, away_goals, lastAction) %>%
mutate(status = ifelse(result == "Goal", "1", "0")) %>%
mutate(distanceToGoal = sqrt((105 - (X * 105)) ^ 2 + (32.5 - (Y * 68)) ^ 2)) %>%
mutate(angleToGoal = abs(atan((7.32 * (105 - (X * 105))) / ((105 - (X * 105))^2 +
(32.5 - (Y * 68)) ^ 2 - (7.32 / 2) ^ 2)) * 180 / pi)) %>%
select(-X, -Y, -result)
library(DALEX)
library(DALEXtra)
library(ranger)
data_processed <- data  %>% mutate(h_a = as.factor(h_a),
situation = as.factor(situation),
shotType = as.factor(shotType),
lastAction = as.factor(lastAction),
status = as.numeric(status))
model <- ranger::ranger(status ~., data = data_processed, classification = TRUE, probability = TRUE)
obs40 <- data_processed[40, !(colnames(data_processed) %in% c("status"))]
predict_40 <- predict(model, obs40)
ifelse(predict_40$predictions[2] <= 0.5, 0, 1)
data_processed[12, "status"]
explainer <- explain(model, data = data_processed, y = as.numeric(data_processed$status))
plot(predict_parts(explainer = explainer, new_observation = obs40))
plot(predict_parts(explainer = explainer, new_observation = obs40, type = 'shap', B = 4))
obs37 <- data_processed[37, !(colnames(data_processed) %in% c("status"))]
plot(predict_parts(explainer = explainer, new_observation = obs37))
obs120 <- data_processed[120, !(colnames(data_processed) %in% c("status"))]
plot(predict_parts(explainer = explainer, new_observation = obs120))
EPL_2021 <- read.csv("EPL_2021.csv")
head(EPL_2021)
library(dplyr)
data <- EPL_2021 %>% select(result, X, Y, xG, h_a, situation, shotType, home_goals, away_goals, lastAction) %>%
mutate(status = ifelse(result == "Goal", "1", "0")) %>%
mutate(distanceToGoal = sqrt((105 - (X * 105)) ^ 2 + (32.5 - (Y * 68)) ^ 2)) %>%
mutate(angleToGoal = abs(atan((7.32 * (105 - (X * 105))) / ((105 - (X * 105))^2 +
(32.5 - (Y * 68)) ^ 2 - (7.32 / 2) ^ 2)) * 180 / pi)) %>%
select(-X, -Y, -result)
model <- ranger::ranger(xG~., data = data, classification = TRUE, probability = TRUE)
